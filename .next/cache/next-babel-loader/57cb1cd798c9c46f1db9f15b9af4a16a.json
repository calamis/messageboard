{"ast":null,"code":"import dbConnect from '../../../config/dbConnect';\nimport Note from '../../../models/note';\ndbConnect();\nexport default (async (req, res) => {\n  const {\n    query: {\n      id\n    },\n    method\n  } = req;\n\n  switch (method) {\n    case 'GET':\n      try {\n        const note = await Note.findById(id);\n\n        if (!note) {\n          return status(400).json({\n            success: false\n          });\n        }\n\n        res.status(200).json({\n          success: true,\n          data: note\n        });\n      } catch (error) {\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    case 'PUT':\n      try {\n        const note = await Note.findByIdAndUpdate(id, req.body, {\n          new: true,\n          runValidators: true\n        }); // Fail\n\n        if (!note) {\n          return status(400).json({\n            success: false\n          });\n        } // Success\n\n\n        res.status(200).json({\n          success: true,\n          data: note\n        });\n      } catch (error) {\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    case 'DELETE':\n      try {\n        const deletedNote = await Note.deleteOne({\n          _id: id\n        });\n\n        if (!deletedNote) {\n          return res.status(400).json({\n            success: false\n          });\n        }\n\n        res.status(200).json({\n          success: true,\n          data: {}\n        });\n      } catch (error) {\n        res.status(400).json({\n          success: false\n        });\n      }\n\n      break;\n\n    default:\n      res.status(400).json({\n        success: false\n      });\n  }\n});","map":{"version":3,"sources":["/Users/damboy/Projects/nextjs/messageboard/pages/api/notes/[id].js"],"names":["dbConnect","Note","req","res","query","id","method","note","findById","status","json","success","data","error","findByIdAndUpdate","body","new","runValidators","deletedNote","deleteOne","_id"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,2BAAtB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AAEAD,SAAS;AAET,gBAAe,OAAOE,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,QAAM;AACFC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF,KADL;AAEFC,IAAAA;AAFE,MAGFJ,GAHJ;;AAKA,UAAOI,MAAP;AACI,SAAK,KAAL;AACI,UAAI;AACA,cAAMC,IAAI,GAAG,MAAMN,IAAI,CAACO,QAAL,CAAcH,EAAd,CAAnB;;AAEA,YAAI,CAACE,IAAL,EAAW;AACP,iBAAOE,MAAM,CAAC,GAAD,CAAN,CAAYC,IAAZ,CAAiB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAAjB,CAAP;AACH;;AAEDR,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,IAAI,EAAEL;AAAvB,SAArB;AACH,OARD,CAQE,OAAOM,KAAP,EAAc;AACZV,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAArB;AACH;;AACD;;AACJ,SAAK,KAAL;AACI,UAAI;AACA,cAAMJ,IAAI,GAAG,MAAMN,IAAI,CAACa,iBAAL,CAAuBT,EAAvB,EAA2BH,GAAG,CAACa,IAA/B,EAAqC;AACpDC,UAAAA,GAAG,EAAE,IAD+C;AAEpDC,UAAAA,aAAa,EAAE;AAFqC,SAArC,CAAnB,CADA,CAKA;;AACA,YAAI,CAACV,IAAL,EAAW;AACP,iBAAOE,MAAM,CAAC,GAAD,CAAN,CAAYC,IAAZ,CAAiB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAAjB,CAAP;AACH,SARD,CASA;;;AACAR,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,IAAI,EAAEL;AAAvB,SAArB;AACH,OAXD,CAWE,OAAOM,KAAP,EAAc;AACZV,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAArB;AACH;;AACD;;AACJ,SAAK,QAAL;AACI,UAAI;AACA,cAAMO,WAAW,GAAG,MAAMjB,IAAI,CAACkB,SAAL,CAAe;AAAEC,UAAAA,GAAG,EAAEf;AAAP,SAAf,CAA1B;;AAEA,YAAG,CAACa,WAAJ,EAAiB;AACb,iBAAOf,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAC;AAAV,WAArB,CAAP;AACH;;AAEDR,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE,IAAX;AAAiBC,UAAAA,IAAI,EAAE;AAAvB,SAArB;AACH,OARD,CAQE,OAAOC,KAAP,EAAc;AACZV,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAArB;AACH;;AACD;;AACJ;AACIR,MAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAArB;AA5CR;AA8CH,CApDD","sourcesContent":["import dbConnect from '../../../config/dbConnect';\nimport Note from '../../../models/note';\n\ndbConnect();\n\nexport default async (req, res) => {\n    const {\n        query: { id },\n        method\n    } = req;\n\n    switch(method) {\n        case 'GET':\n            try {\n                const note = await Note.findById(id);\n\n                if (!note) {\n                    return status(400).json({ success: false });\n                }\n\n                res.status(200).json({ success: true, data: note });\n            } catch (error) {\n                res.status(400).json({ success: false });\n            }\n            break;\n        case 'PUT': \n            try {\n                const note = await Note.findByIdAndUpdate(id, req.body, {\n                    new: true,\n                    runValidators: true\n                });\n                // Fail\n                if (!note) {\n                    return status(400).json({ success: false });\n                }\n                // Success\n                res.status(200).json({ success: true, data: note });\n            } catch (error) {\n                res.status(400).json({ success: false });\n            }\n            break;\n        case 'DELETE': \n            try {\n                const deletedNote = await Note.deleteOne({ _id: id });\n\n                if(!deletedNote) {\n                    return res.status(400).json({ success:false });\n                }\n\n                res.status(200).json({ success: true, data: {} });\n            } catch (error) {\n                res.status(400).json({ success: false });\n            }\n            break;\n        default: \n            res.status(400).json({ success: false });\n    }\n}"]},"metadata":{},"sourceType":"module"}