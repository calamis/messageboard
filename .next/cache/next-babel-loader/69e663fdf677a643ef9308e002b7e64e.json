{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/damboy/Projects/nextjs/messageboard/pages/[id]/edit.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Link from 'next/link';\nimport { useState, useEffect } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport { useRouter } from 'next/router';\nimport { Button, Form, FormControl, FormGroup, Spinner } from 'react-bootstrap';\n\nvar EditNote = function EditNote(_ref) {\n  _s();\n\n  var note = _ref.note;\n\n  var _useState = useState({\n    title: note.title,\n    description: note.description\n  }),\n      form = _useState[0],\n      setForm = _useState[1];\n\n  var _useState2 = useState(false),\n      isSubmitting = _useState2[0],\n      setIsSubmitting = _useState2[1];\n\n  var _useState3 = useState({}),\n      errors = _useState3[0],\n      setErrors = _useState3[1];\n\n  var _useState4 = useState(false),\n      validated = _useState4[0],\n      setValidated = _useState4[1];\n\n  var router = useRouter();\n  useEffect(function () {\n    console.log('useEffect'); // Run for Errors\n\n    if (isSubmitting) {\n      if (Object.keys(errors).length === 0) {\n        // console.log('check to success');\n        updateNote(); //http request to API\n        // alert('Create note successfully!');\n      } else {\n        setIsSubmitting(false);\n      }\n    }\n  }, [errors]);\n\n  var updateNote = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch(\"http://localhost:3000/api/notes/\".concat(router.query.id), {\n                method: 'PUT',\n                headers: {\n                  \"Accept\": \"application/json\",\n                  \"Content-type\": \"application/json\"\n                },\n                body: JSON.stringify(form)\n              });\n\n            case 3:\n              res = _context.sent;\n              router.push(\"/\");\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function updateNote() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleChange = function handleChange(e) {\n    setForm(_objectSpread(_objectSpread({}, form), {}, _defineProperty({}, e.target.name, e.target.value)));\n  };\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n    var errs = validate();\n    setErrors(errs);\n    setIsSubmitting(true);\n  };\n\n  var validate = function validate() {\n    var err = {};\n\n    if (!form.title) {\n      err.title = 'Tile is required!';\n    }\n\n    if (!form.description) {\n      err.description = 'Description is required!';\n    }\n\n    return err;\n  };\n\n  return __jsx(\"div\", {\n    className: \"main__single__note\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, \"Update Note\"), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }, isSubmitting ? __jsx(Spinner, {\n    animation: \"border\",\n    role: \"status\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 27\n    }\n  }, __jsx(\"span\", {\n    className: \"sr-only\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 29\n    }\n  }, \"Loading...\")) : __jsx(Form, {\n    noValidate: true,\n    validated: validated,\n    onSubmit: handleSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 27\n    }\n  }, __jsx(Form.Group, {\n    controlId: \"title.ControlInput1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 29\n    }\n  }, __jsx(Form.Label, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 33\n    }\n  }, \"Title\"), __jsx(Form.Control, {\n    required: true,\n    type: \"text\",\n    placeholder: \"New Note\",\n    name: \"title\",\n    value: form.title,\n    onChange: handleChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 33\n    }\n  }), errors.title ? __jsx(\"p\", {\n    className: \"error\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 39\n    }\n  }, errors.title) : null), __jsx(Form.Group, {\n    controlId: \"description.ControlTextarea1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 29\n    }\n  }, __jsx(Form.Label, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 33\n    }\n  }, \"Description\"), __jsx(Form.Control, {\n    required: true,\n    as: \"textarea\",\n    placeholder: \"you are awesome\",\n    name: \"description\",\n    value: form.description,\n    onChange: handleChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 33\n    }\n  }), errors.description ? __jsx(\"p\", {\n    className: \"error\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 39\n    }\n  }, errors.description) : null), __jsx(Button, {\n    variant: \"light\",\n    onClick: function onClick() {\n      return router.push('/');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 29\n    }\n  }, \"Cancel\"), __jsx(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 29\n    }\n  }, \"Submit\")))));\n};\n\n_s(EditNote, \"+qCxizX0meIdabZEK823LOfhHWk=\", false, function () {\n  return [useRouter];\n});\n\n_c = EditNote;\n\nEditNote.getInitialProps = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref3) {\n    var id, res, _yield$res$json, data;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            id = _ref3.query.id;\n            _context2.next = 3;\n            return fetch(\"http://localhost:3000/api/notes/\".concat(id));\n\n          case 3:\n            res = _context2.sent;\n            _context2.next = 6;\n            return res.json();\n\n          case 6:\n            _yield$res$json = _context2.sent;\n            data = _yield$res$json.data;\n            return _context2.abrupt(\"return\", {\n              note: data\n            });\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nexport default EditNote;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditNote\");","map":{"version":3,"sources":["/Users/damboy/Projects/nextjs/messageboard/pages/[id]/edit.js"],"names":["Link","useState","useEffect","fetch","useRouter","Button","Form","FormControl","FormGroup","Spinner","EditNote","note","title","description","form","setForm","isSubmitting","setIsSubmitting","errors","setErrors","validated","setValidated","router","console","log","Object","keys","length","updateNote","query","id","method","headers","body","JSON","stringify","res","push","handleChange","e","target","name","value","handleSubmit","preventDefault","errs","validate","err","getInitialProps","json","data"],"mappings":"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","sourcesContent":["import Link from 'next/link'\nimport { useState, useEffect } from 'react'\nimport fetch from 'isomorphic-unfetch'\nimport { useRouter } from 'next/router'\nimport {\n    Button,\n    Form,\n    FormControl,\n    FormGroup,\n    Spinner\n} from 'react-bootstrap'\n\nconst EditNote = ({ note }) => {\n    const [form, setForm] = useState({title: note.title, description: note.description})\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [errors, setErrors] = useState({});\n    const [validated, setValidated] = useState(false);\n    const router = useRouter();\n\n    useEffect(() => {\n        console.log('useEffect');\n        // Run for Errors\n        if (isSubmitting) {\n            if (Object.keys(errors).length === 0) {\n                // console.log('check to success');\n                updateNote(); //http request to API\n                // alert('Create note successfully!');\n            } else {\n                setIsSubmitting(false);\n            }\n        }   \n    }, [errors])\n\n    const updateNote = async () => {\n        try {\n            const res = await fetch(`http://localhost:3000/api/notes/${router.query.id}`, {\n                method: 'PUT',\n                headers: {\n                    \"Accept\": \"application/json\",\n                    \"Content-type\": \"application/json\"\n                },\n                body: JSON.stringify(form)\n            })\n            router.push(\"/\");\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    const handleChange = (e) => {\n        setForm({\n            ...form,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        let errs = validate();\n        setErrors(errs);\n        setIsSubmitting(true);\n    }\n\n    const validate = () => {\n        let err = {};\n\n        if (!form.title) {\n            err.title = 'Tile is required!';\n        }\n        if (!form.description) {\n            err.description = 'Description is required!'\n        }\n\n        return err;\n    }\n\n    return (\n        <div className=\"main__single__note\">\n            <div className=\"container\">\n                <h1>Update Note</h1>\n                <div>\n                    {\n                        isSubmitting \n                        ? <Spinner animation=\"border\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </Spinner>\n                        : <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                            <Form.Group controlId=\"title.ControlInput1\">\n                                <Form.Label>Title</Form.Label>\n                                <Form.Control\n                                    required\n                                    type=\"text\" \n                                    placeholder=\"New Note\"\n                                    name=\"title\"\n                                    value={form.title}\n                                    onChange={handleChange} \n                                />\n                                {\n                                errors.title \n                                    ? <p className=\"error\">{errors.title}</p> \n                                    : null \n                                }\n                            </Form.Group>\n                            <Form.Group controlId=\"description.ControlTextarea1\">\n                                <Form.Label>Description</Form.Label>\n                                <Form.Control \n                                    required\n                                    as=\"textarea\" \n                                    placeholder=\"you are awesome\"\n                                    name=\"description\"\n                                    value={form.description}\n                                    onChange={handleChange} \n                                />\n                                {\n                                errors.description \n                                    ? <p className=\"error\">{errors.description}</p> \n                                    : null \n                                }\n                            </Form.Group>\n                            <Button variant=\"light\" onClick={() => router.push('/')}>Cancel</Button>\n                            <Button variant=\"primary\" type=\"submit\">Submit</Button>\n                        </Form>\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nEditNote.getInitialProps = async ({ query: { id } }) => {\n    const res = await fetch(`http://localhost:3000/api/notes/${id}`);\n    const { data } = await res.json();\n\n    return { note: data }\n}\n\nexport default EditNote"]},"metadata":{},"sourceType":"module"}